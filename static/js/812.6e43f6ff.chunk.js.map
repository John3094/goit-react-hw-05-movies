{"version":3,"file":"static/js/812.6e43f6ff.chunk.js","mappings":"iQAEaA,E,OAASC,GAAAA,EAAH,6C,SCCNC,EAAa,SAAC,GAAqC,IAAD,IAAlCC,OAAUC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,QAC7C,OACE,4BACE,SAACL,EAAD,UAASI,KACT,uBAAIC,MAGT,E,iBCuCD,EA1CgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,oGAEjBF,GAAa,GAFI,UAGKG,EAAAA,EAAAA,IAAgBT,GAHrB,OAGXG,EAHW,OAIjBC,EAAWD,GAJM,gDAMjBO,EAAAA,GAAAA,MAAY,qBANK,yBAQjBJ,GAAa,GARI,4EAAH,qDAWlBE,GACD,GAAE,CAACR,IAECG,GAKH,2BACGE,IAAa,SAACM,EAAA,EAAD,IACM,IAAnBR,EAAQS,QAAgB,6CACzB,wBACGT,EAAQU,KAAI,SAAAhB,GAAM,OACjB,yBACE,SAACD,EAAD,CAAYC,OAAQA,KADbA,EAAOiB,GADC,OAMrB,SAAC,KAAD,CACEC,aAAc,CAAEC,MAAO,CAAEC,WAAY,UAAWC,MAAO,cAfpD,IAmBV,C,uNC7CDC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,mCACTC,SAAU,SAGL,IAAMC,EAAY,mCAEZC,EAAc,mCAAG,WAAMC,GAAN,gGAEHL,EAAAA,EAAAA,IAAA,yBAA4BK,IAFzB,cAEpBC,EAFoB,yBAGnBA,EAASC,KAAKC,SAHK,gCAK1BC,QAAQC,IAAI,KAAMC,SALQ,yDAAH,sDASdC,EAAe,mCAAG,WAAMjB,GAAN,gGAEJK,EAAAA,EAAAA,IAAA,gBAAmBL,IAFf,cAErBW,EAFqB,yBAGpBA,EAASC,MAHW,gCAK3BE,QAAQC,IAAI,KAAMC,SALS,yDAAH,sDASfE,EAAY,mCAAG,WAAMlB,GAAN,gGAEDK,EAAAA,EAAAA,IAAA,gBAAmBL,EAAnB,aAFC,cAElBW,EAFkB,yBAGjBA,EAASC,KAAKO,MAHG,gCAKxBL,QAAQC,IAAI,KAAMC,SALM,yDAAH,sDASZrB,EAAe,mCAAG,WAAMK,GAAN,gGAEJK,EAAAA,EAAAA,IAAA,gBAAmBL,EAAnB,aAFI,cAErBW,EAFqB,yBAGpBA,EAASC,KAAKC,SAHM,gCAK3BC,QAAQC,IAAI,KAAMC,SALS,yDAAH,sDASfI,EAAc,mCAAG,WAAMC,GAAN,gGAEHhB,EAAAA,EAAAA,IAAA,6BAAgCgB,IAF7B,cAEpBV,EAFoB,yBAGnBA,EAASC,KAAKC,SAHK,gCAK1BC,QAAQC,IAAI,KAAMC,SALQ,yDAAH,qD","sources":["components/ReviewItem/ReviewItem.styled.js","components/ReviewItem/ReviewItem.jsx","components/Reviews/Reviews.jsx","service/Api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Author = styled.p`\n  font-weight: 700;\n`;\n","import { Author } from './ReviewItem.styled';\nimport PropTypes from 'prop-types';\n\nexport const ReviewItem = ({ review: { author, content } }) => {\n  return (\n    <div>\n      <Author>{author}</Author>\n      <p>{content}</p>\n    </div>\n  );\n};\n\nReviewItem.propTypes = {\n  review: PropTypes.shape({\n    author: PropTypes.string,\n    content: PropTypes.string,\n  }),\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from '../../service/Api';\nimport { ReviewItem } from '../ReviewItem/ReviewItem';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        setIsLoading(true);\n        const reviews = await getMovieReviews(movieId);\n        setReviews(reviews);\n      } catch (error) {\n        toast.error(\"This didn't work.\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchReviews();\n  }, [movieId]);\n\n  if (!reviews) {\n    return null;\n  }\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {reviews.length === 0 && 'We don`t have any reviews for this movie.'}\n      <ul>\n        {reviews.map(review => (\n          <li key={review.id}>\n            <ReviewItem review={review} />\n          </li>\n        ))}\n      </ul>\n      <Toaster\n        toastOptions={{ style: { background: '#ff1111', color: '#fff' } }}\n      />\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: 'd525f3289f5c138ed98ba04c26330946',\n  language: 'en-US',\n};\n\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w300/';\n\nexport const getMoviesTrend = async period => {\n  try {\n    const response = await axios.get(`trending/movie/${period}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getMovieDetails = async id => {\n  try {\n    const response = await axios.get(`movie/${id}`);\n    return response.data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getMovieCast = async id => {\n  try {\n    const response = await axios.get(`movie/${id}/credits`);\n    return response.data.cast;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getMovieReviews = async id => {\n  try {\n    const response = await axios.get(`movie/${id}/reviews`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getMovieByName = async query => {\n  try {\n    const response = await axios.get(`search/movie?query=${query}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n"],"names":["Author","styled","ReviewItem","review","author","content","movieId","useParams","useState","reviews","setReviews","isLoading","setIsLoading","useEffect","fetchReviews","getMovieReviews","toast","Loader","length","map","id","toastOptions","style","background","color","axios","api_key","language","IMAGE_URL","getMoviesTrend","period","response","data","results","console","log","message","getMovieDetails","getMovieCast","cast","getMovieByName","query"],"sourceRoot":""}