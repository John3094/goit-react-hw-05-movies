{"version":3,"file":"static/js/545.f9518ebe.chunk.js","mappings":"gRAEaA,EAAMC,EAAAA,GAAAA,IAAH,wC,SCEHC,EAAgB,SAAC,GAEvB,IAAD,IADJC,cAAiBC,EACb,EADaA,aAAcC,EAC3B,EAD2BA,KAAMC,EACjC,EADiCA,UAErC,OACE,4BACE,uBACGF,GACC,SAACJ,EAAD,CAAKO,IAAG,UAAKC,EAAAA,IAAL,OAAiBJ,GAAgBK,IAAKJ,EAAMK,MAAM,SAE1D,SAACV,EAAD,CACEO,IAAG,wEACHE,IAAI,OACJC,MAAM,WAIZ,uBAAIL,KACJ,yBAAG,aAAWC,OAGnB,ECtBYK,EAAaV,EAAAA,GAAAA,IAAH,0DAKVW,EAAWX,EAAAA,GAAAA,GAAH,uNAURY,EAAWZ,EAAAA,GAAAA,GAAH,mQ,iBCkCrB,EA3Ca,WACX,IAAQa,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAiBA,IAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,oGAEnBF,GAAa,GAFM,UAGAG,EAAAA,EAAAA,IAAaT,GAHb,OAGbU,EAHa,OAInBN,EAAaM,GAJM,gDAMnBC,EAAAA,GAAAA,MAAY,qBANO,yBAQnBL,GAAa,GARM,4EAAH,qDAWpBE,GACD,GAAE,CAACR,IAECG,EAIL,OACE,UAACN,EAAD,WACGQ,IAAa,SAACO,EAAA,EAAD,IACbT,IACC,SAACL,EAAD,UACGK,EAAUU,KAAI,SAAAxB,GAAa,OAC1B,SAACU,EAAD,WACE,SAACX,EAAD,CAAeC,cAAeA,KADjBA,EAAcyB,GADH,OAOhC,SAAC,KAAD,CACEC,aAAc,CAAEC,MAAO,CAAEC,WAAY,UAAWC,MAAO,aAI9D,C,uNC/CDC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,mCACTC,SAAU,SAGL,IAAM3B,EAAY,mCAEZ4B,EAAc,mCAAG,WAAMC,GAAN,gGAEHJ,EAAAA,EAAAA,IAAA,yBAA4BI,IAFzB,cAEpBC,EAFoB,yBAGnBA,EAASC,KAAKC,SAHK,gCAK1BC,QAAQC,IAAI,KAAMC,SALQ,yDAAH,sDASdC,EAAe,mCAAG,WAAMhB,GAAN,gGAEJK,EAAAA,EAAAA,IAAA,gBAAmBL,IAFf,cAErBU,EAFqB,yBAGpBA,EAASC,MAHW,gCAK3BE,QAAQC,IAAI,KAAMC,SALS,yDAAH,sDASfpB,EAAY,mCAAG,WAAMK,GAAN,gGAEDK,EAAAA,EAAAA,IAAA,gBAAmBL,EAAnB,aAFC,cAElBU,EAFkB,yBAGjBA,EAASC,KAAKf,MAHG,gCAKxBiB,QAAQC,IAAI,KAAMC,SALM,yDAAH,sDASZE,EAAe,mCAAG,WAAMjB,GAAN,gGAEJK,EAAAA,EAAAA,IAAA,gBAAmBL,EAAnB,aAFI,cAErBU,EAFqB,yBAGpBA,EAASC,KAAKC,SAHM,gCAK3BC,QAAQC,IAAI,KAAMC,SALS,yDAAH,sDASfG,EAAc,mCAAG,WAAMC,GAAN,gGAEHd,EAAAA,EAAAA,IAAA,6BAAgCc,IAF7B,cAEpBT,EAFoB,yBAGnBA,EAASC,KAAKC,SAHK,gCAK1BC,QAAQC,IAAI,KAAMC,SALQ,yDAAH,qD","sources":["components/MovieCastItem/MovieCastItem.styled.js","components/MovieCastItem/MovieCastItem.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","service/Api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Img = styled.img`\n  width: 100%;\n`;\n","import { IMAGE_URL } from '../../service/Api';\nimport { Img } from './MovieCastItem.styled';\nimport PropTypes from 'prop-types';\n\nexport const MovieCastItem = ({\n  movieCastItem: { profile_path, name, character },\n}) => {\n  return (\n    <div>\n      <p>\n        {profile_path ? (\n          <Img src={`${IMAGE_URL}${profile_path}`} alt={name} width=\"100\" />\n        ) : (\n          <Img\n            src={`https://banffventureforum.com/wp-content/uploads/2019/08/No-Image.png`}\n            alt=\"face\"\n            width=\"100\"\n          />\n        )}\n      </p>\n      <p>{name}</p>\n      <p>Character:{character}</p>\n    </div>\n  );\n};\n\nMovieCastItem.propTypes = {\n  movieCastItem: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    profile_path: PropTypes.string,\n    character: PropTypes.string,\n  }),\n};\n","import styled from 'styled-components';\n\nexport const CastStyled = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));\n  grid-gap: 20px;\n  margin: 0 auto;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const CastItem = styled.li`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 12px;\n  font-weight: 500;\n  border-radius: 5px;\n  height: 100%;\n  box-shadow: 0px 5px 5px grey;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from '../../service/Api';\nimport { MovieCastItem } from '../MovieCastItem/MovieCastItem';\nimport { CastStyled, CastList, CastItem } from './Cast.styled';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      try {\n        setIsLoading(true);\n        const cast = await getMovieCast(movieId);\n        setMovieCast(cast);\n      } catch (error) {\n        toast.error(\"This didn't work.\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieCast();\n  }, [movieId]);\n\n  if (!movieCast) {\n    return;\n  }\n\n  return (\n    <CastStyled>\n      {isLoading && <Loader />}\n      {movieCast && (\n        <CastList>\n          {movieCast.map(movieCastItem => (\n            <CastItem key={movieCastItem.id}>\n              <MovieCastItem movieCastItem={movieCastItem} />\n            </CastItem>\n          ))}\n        </CastList>\n      )}\n      <Toaster\n        toastOptions={{ style: { background: '#ff1111', color: '#fff' } }}\n      />\n    </CastStyled>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: 'd525f3289f5c138ed98ba04c26330946',\n  language: 'en-US',\n};\n\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w300/';\n\nexport const getMoviesTrend = async period => {\n  try {\n    const response = await axios.get(`trending/movie/${period}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getMovieDetails = async id => {\n  try {\n    const response = await axios.get(`movie/${id}`);\n    return response.data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getMovieCast = async id => {\n  try {\n    const response = await axios.get(`movie/${id}/credits`);\n    return response.data.cast;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getMovieReviews = async id => {\n  try {\n    const response = await axios.get(`movie/${id}/reviews`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getMovieByName = async query => {\n  try {\n    const response = await axios.get(`search/movie?query=${query}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n"],"names":["Img","styled","MovieCastItem","movieCastItem","profile_path","name","character","src","IMAGE_URL","alt","width","CastStyled","CastList","CastItem","movieId","useParams","useState","movieCast","setMovieCast","isLoading","setIsLoading","useEffect","fetchMovieCast","getMovieCast","cast","toast","Loader","map","id","toastOptions","style","background","color","axios","api_key","language","getMoviesTrend","period","response","data","results","console","log","message","getMovieDetails","getMovieReviews","getMovieByName","query"],"sourceRoot":""}